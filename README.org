* The Biosynthetic Gene cluster Meta'omics abundance Profiler (BiG-MAP)
#+CAPTION: The pipelene of all the modules combined
#+NAME: BiG-MAP.fig_1
[[https://github.com/KoenvdBerg/BiG-MAP/blob/master/FINAL_pipeline_V3.png]]

The Biosynthetic Gene cluster Meta'omics abundance Profiler (BiG-MAP)
is currently in development. For the analysis of bacterial metagenomic
and metatranscriptomic samples more and more tools become
available. This tool is focussed on finding the representation of
primary metabolic pathways and their related homologs in metagenomic
and metatranscriptomic samples. These pathways are readily obtained
from (draft) bacterial genomes using antiSMASH or gutSMASH. To be able
to process the outputs from these tools into proper abundance and
expressions values, the following programs form the essential part of
BiG-MAP:
- BiG-MAP.download.py
- BiG-MAP.family.py
- BiG-MAP.map.py
- BiG-MAP.analyse.py
For information on how to implement this program, scroll down to
*Overview and quickstart*. 

* Installation
Install BiG-MAP dependencies using conda. Conda can be installed from
[[https://docs.conda.io/en/latest/miniconda.html][miniconda_link]]. 
#+BEGIN_EXAMPLE
~$ conda env create -f BiG-MAP.yml BiG-MAP
~$ conda activate BiG-MAP
#+END_EXAMPLE
After this all the dependencies are installed. To install BiG-MAP run:
#+BEGIN_EXAMPLE
~$ git clone https://github.com/KoenvdBerg/BiG-MAP.git
#+END_EXAMPLE


* Example Workflow
A typical workflow for BiG-MAP consists of the following 4 consecutive steps:
1) Downloading WGS data using BiG-MAP.download.py
2) Generating gene cluster families (GCFs) and housekeeping gene
   families (HGFs) using BiG-MAP.family.py
3) Computing abundance and expression profiles of selected
   representatives from each GCF and HGF using BiG-MAP.map.py
4) Analysing the resulting BIOM file for profiles using
   BiG-MAP.analyse.py
The four steps are described below, and for each an example is
provided. 

** 1) S-MAP.download.py
This script is created to easily download the metagenomic and/or
metatranscriptomic samples from the online NCBI repository. First, the
samples are downloaded in /.SRA/ format, and then they are converted
into /.fastq/ pairs using /fastq-dump/. 
#+BEGIN_EXAMPLE
python3 BiG-MAP.download.py [Options]* -A [accession_list_file] -O [path_to_outdir]
#+END_EXAMPLE
To download the 78 samples from Schirmer et al. (2018), go to the [[https://www.ncbi.nlm.nih.gov/Traces/study/][SRA
run selector]] and run the following command:
#+BEGIN_EXAMPLE
python3 BiG-MAP.download.py -A Acc_list.txt -O /mnt/scratch/usr001/fastq/schirmer/

Acc_list.txt:
SRR5983273
SRR5983265
SRR5983266
SRR5983268
SRR5983270
SRR5983271
SRR5983275
...
#+END_EXAMPLE

** S-MAP.genecluster.py
The main purpose of this script is to compute GCFs and HGFs using
sequence similarity as sole metric. For GCF computation, protein
sequences are used while for the HGF computation DNA sequences are
used. FastANI is implemented to compute the GCFs and HGFs. The general
usage is:
#+BEGIN_EXAMPLE
python3 BiG-MAP.family.py [Options]* -D [input dir(s)] -O [output dir]
#+END_EXAMPLE
In the example of a gutSMASH run on 1520 (draft) reference genomes that
are present in the gut, with a fastANI treshold of 0.7 for both the
GCFs and HGFs, no flanking genes of the core, no genome fasta file
outputs and 6 process cores:
#+BEGIN_EXAMPLE
python3 BiG-MAP.family.py -tg 0.7 -th 0.7 -f 0 -g False -p 6 -D /mnt/scratch/usr001/gutSMASH-output/ -O /mnt/scratch/usr001/results/

This yields:
BiG-MAP.GCF_HGF.bed
BiG-MAP.GCF_HGF.fna
BiG-MAP.GCF_HGF.json
#+END_EXAMPLE

** S-MAP.map.py
This module is designed to map the metagenomic and/or
metatranscriptomic samples to the reference that is created using
module 2. It does this using /bowtie2/. The following will be
computed: TPM, RPKM, coverage, core coverage. The coverage is
calculated using /Bedtools/, and the read count values using
/Samtools/. The following options are included:

#+BEGIN_EXAMPLE
______________________________________________________________________

     S-MAP map: maps the paired reads to the predicted MGCs
______________________________________________________________________

Generic command: python3 S-MAP.map.py [Options]* -R [reference]
-I1 [mate-1s] -I2 [mate-2s] -O [outdir]

Maps the metagenomic/metatranscriptomic reads to the fasta reference
file and outputs RPKM read counts in .csv and BIOM format

Obligatory arguments:
    -R    Provide the reference fasta file in .fasta or .fna format
    -I1   Provide the mate 1s of the paired metagenomic and/or
          metatranscriptomic samples here. These samples should be
          provided in fastq-format (.fastq, .fq, .fq.gz). Also, this
          can be a space seperated list from the command line.
    -I2   Provide the mate 2s of the paired metagenomic and/or
          metatranscriptomic samples here. These samples should be
          provided in fastq-format (.fastq, .fq, .fq.gz). Also, this
          can be a space seperated list from the command line.
    -O    Put path to the output folder where the results should be
          deposited. Default = current folder (.)

Options:
    -cc   Also calculate the RPKM and coverage values for the core of
          the cluster present in the bedfile. Specify the bedfile
          here. Bedfiles are outputted by S-MAP.genecluster.py
          automatically
    -b    Outputs the resulting read counts in biom format (v1.0) as
          well. This will be useful to analyze the results in
          S-MAP.analyse. Therefore, it  is important to include
          the metadata here as well: this metagenomical data should
          be in the same format as the example metadata
    -f    Input files are in fasta format (.fna, .fa, .fasta): True/False.
          Default = False.
    -s    Bowtie2 setting: very-fast-local, fast-local, sensitive-local
          , very-sensitive-local. Default = sensitive-local
______________________________________________________________________
#+END_EXAMPLE
** S-MAP.analyse.py
This program analyses the mapping results using either a zero-inflated
Gaussian mixture model (fitZIG) or a Kruskall model. 

#+BEGIN_EXAMPLE
______________________________________________________________________

S-MAP analyse: analyse the biom-outputs (ZIG/Kruskall-Wallis)
______________________________________________________________________

Generic command: python3 S-MAP.analyse.py test -B [biom_file]
-T [SampleType] -M [meta_group] -G [[groups]] -O [outdir]

Tests the present biom file using either a fitZIG model or a
Kruskall-Wallis model. Note that it is also possible to work in R
studio with the R script: meteclust.norm.R

Obligatory arguments:
    -B    Provide the Biom file here
    -T    metagenomic/metatranscriptomic
    -M    provide the metagroup here. This is the first column in the
          options output. Examples: DiseaseStatus, Longitude, etc...
    -G    Space separated list of 2 groups that are to be compared.
          Example: UC and non-IBD --> UC non-IBD
    -O    Put path to the output folder where the results should be
          deposited. Default = current folder (.)
______________________________________________________________________
#+END_EXAMPLE
* Requirements
** Software:
- Python 3+
- R statistics
- fastq-dump
- fastANI
- HMMer
- Bowtie2
- Samtools
- Bedtools
- biom

** Packages:
*** Python
- BioPython
- pandas
*** R
- metagenomeSeq
- biomformat
- ComplexHeatmap=2.0.0
- viridisLite
- RColorBrewer
- tidyverse
